<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAKCgAAAEAIABoGgAAFgAAACgAAAAoAAAAUAAAAAEAIAAAAAAAABkAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAABAAAABAAAAAkAAAAQAAAAGQAAACMAAAAsAAAANAAAADwAAABAAAAAPwAAADkAAAAxAAAAKAAA
        AB4AAAAVAAAADQAAAAcAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAoAAAAVAAAAJQAA
        ADgAAABNAAAAYgEAAHsJBAGWDwcBqQoFAaQCAQCLAAAAbwAAAFYAAABCAAAALgAAABwAAAAPAAAABgAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAJAAAAFQAAACUAAAA5AAAAUAQCAHAQCAGhHw4C1SsU
        A/UiEQPtEQkCwQUEAYsBAQFfAAAAQwAAAC0AAAAbAAAADgAAAAUAAAABAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AAA=
</value>
  </data>
</root>